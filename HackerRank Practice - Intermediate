Variety of Exercises from HackerRank, organized by the data that each question addressed:

# 1. CREATE TABLE STATION (id NUMBER, city VARCHAR2(21), state VARCHAR2(2), LAT_N NUMBER, LONG_W NUMBER);
#Find the difference between the total number of CITY entries in the table and the 
#number of distinct CITY entries in the table.
      SELECT(COUNT(city)- COUNT(distinct city)) FROM station; 

#Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths 
#(i.e.: number of characters in the name). If there is more than one smallest or largest city, 
#choose the one that comes first when ordered alphabetically.
      (select CITY, length(CITY) as city_len from STATION order by city_len asc, CITY asc limit 1) union
      (select CITY, length(city) as city_len from STATION order by city_len desc, CITY asc limit 1);

#Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. 
#Your result cannot contain duplicates.
      SELECT city FROM station WHERE REGEXP_LIKE(city,'^[aeiou]') GROUP BY city;

#Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. 
#Your result cannot contain duplicates.
      SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[aeiou]$';

#Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) 
#as both their first and last characters. Your result cannot contain duplicates.
      SELECT distinct city FROM station WHERE city REGEXP '^[aeiou].*[aeiou]$';

#Query the list of CITY names from STATION that do not start with vowels. 
#Your result cannot contain duplicates.
      SELECT distinct city FROM station WHERE city NOT LIKE 'A%' AND city 
      NOT LIKE 'E%' AND city NOT LIKE 'I%' AND city NOT LIKE 'O%' AND city NOT LIKE 'U%';

#Query the list of CITY names from STATION that do not end with vowels. 
#Your result cannot contain duplicates.
      SELECT distinct city FROM station WHERE city NOT LIKE '%A' AND city NOT LIKE '%E' 
      AND city NOT LIKE '%I' AND city NOT LIKE '%O' AND city NOT LIKE '%U';

#Query the list of CITY names from STATION that either do not start with 
#vowels or do not end with vowels. Your result cannot contain duplicates.
      SELECT distinct city FROM station WHERE city NOT RLIKE '^[aeiou].*[aeiou]$';

#Query the list of CITY names from STATION that do not start with vowels and 
do not end with vowels. Your result cannot contain duplicates.
      SELECT distinct city FROM station WHERE city NOT LIKE 'A%' AND city 
      NOT LIKE 'E%' AND city NOT LIKE 'I%' AND city NOT LIKE 'O%' AND city NOT LIKE 'U%' 
      AND city NOT LIKE '%A' AND city NOT LIKE '%E' AND city NOT LIKE '%I' 
      AND city NOT LIKE '%O' AND city NOT LIKE '%U';
#OR, Using REGEXP#
      SELECT DISTINCT CITY
      FROM STATION
      WHERE CITY NOT REGEXP '^[aeiou]'
      AND CITY NOT REGEXP '[aeiou]$'

#Query the following two values from the STATION table:
#The sum of all values in LAT_N rounded to a scale of 2 decimal places.
#The sum of all values in LONG_W rounded to a scale of 2 decimal places.
      SELECT ROUND(SUM(LAT_N),2) AS lat, ROUND(SUM(LONG_W),2) AS lon FROM station;

#Query the sum of Northern Latitudes (LAT_N) from STATION having values greater 
#than 38.7880 and less than 137.2345. Truncate your answer to 4 decimal places.
      SELECT ROUND(SUM(lat_n),4) FROM station WHERE lat_n BETWEEN 38.7880 AND 137.2345;

#Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is 
#less than 137.2345. Truncate your answer to 4 decimal places.
      SELECT ROUND(MAX(lat_n),4) FROM station WHERE lat_n < 137.2345;

#Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) 
#in STATION that is less than 137.2345. Round your answer to 4 decimal places.
      SELECT ROUND(long_w,4) FROM station 
      WHERE LAT_N = (SELECT MAX(LAT_N) FROM STATION WHERE LAT_N < 137.2345);

#Query the smallest Northern Latitude (LAT_N) from STATION that is greater 
#than 38.7780. Round your answer to 4 decimal places.
      SELECT ROUND(MIN(LAT_N),4) FROM STATION WHERE LAT_N > 38.7780;

#Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) 
in STATION is greater than 38.7780. Round your answer to 4 decimal places.
      SELECT ROUND(long_w,4) FROM station 
      WHERE lat_n = (SELECT MIN(lat_n) FROM station WHERE lat_n > 38.7780)

#Consider P1(a,b) and P2(c,d) to be two points on a 2D plane.
#a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
#b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
#c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
#d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
#Query the Manhattan Distance between points P1 and P2 and round it to a scale of 4 decimal places.
      SELECT ROUND (ABS(MAX(lat_n)-MIN(lat_n)) + ABS(MAX(long_w)-MIN(long_w)),4)
      FROM station;

# Consider P1(a,c) and P2(b,d) to be two points on a 2D plane where 
#(a,b) are the respective minimum and maximum values of Northern Latitude (LAT_N) 
#and (c,d) are the respective minimum and maximum values of Western Longitude (LONG_W) 
#in STATION. Query the Euclidean Distance between points P1 and P2 and format 
#your answer to display 4 decimal digits.
      SELECT ROUND (SQRT(POWER(MAX(lat_n) - MIN(lat_n), 2) + 
      POWER(MAX(long_w) - MIN(long_w), 2)), 4)
      FROM STATION;



#2. CREATE TABLE STUDENTS (id INTEGER, name STRING, marks INTEGER);
#Query the Name of any student in STUDENTS who scored higher than  Marks. 
#Order your output by the last three characters of each name. 
#If two or more students both have names ending in the same last three characters 
#(i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
      SELECT name FROM students
      WHERE marks > 75
      ORDER BY RIGHT(NAME, 3), ID ASC;

#You are given two tables: Students and Grades. Students contains three columns ID, 
#Name and Marks. Grades contains the following data: grade, min_mark, max_mark

#Ketty gives Eve a task to generate a report containing three columns: 
#Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received 
#a grade lower than 8. The report must be in descending order by grade -- i.e. higher 
#grades are entered first. If there is more than one student with the same grade 
#(8-10) assigned to them, order those particular students by their name alphabetically.
#Finally, if the grade is lower than 8, use "NULL" as their name and list them by 
#their grades in descending order. If there is more than one student with the same 
#grade (1-7) assigned to them, order those particular students by their marks in 
#ascending order. Write a query to help Eve.

        SELECT CASE WHEN grd.grade < 8 THEN NULL WHEN grd.grade >= 8 THEN std.name END, 
        grd.grade, std.marks FROM students std, grades grd WHERE std.marks BETWEEN 
        grd.min_mark AND grd.max_mark ORDER BY grd.grade DESC, std.name ASC;



#3. CREATE TABLE employee (employee_id INTEGER, name STRING, months INTEGER, salary INTEGER);
#Write a query that prints a list of employee names (i.e.: the name attribute) 
from the Employee table in alphabetical order.
      SELECT name FROM employee ORDER BY name ASC,

#Write a query that prints a list of employee names (i.e.: the name attribute) 
#for employees in Employee having a salary greater than  per month who have been 
#employees for less than  months. Sort your result by ascending employee_id.
      SELECT name FROM employee 
      WHERE salary > 2000
      AND months < 10
      ORDER BY employee_id ASC;  



#4.CREATE TABLE triangles (A INTEGER, B INTEGER, C INTEGER);
#Each column is a length of a side of the triangle
#Write a query identifying the type of each record in the TRIANGLES table using its 
three side lengths. Output one of the following statements for each record in the table:
      SELECT
      CASE 
      WHEN A + B <= C or A + C <= B or B + C <= A THEN 'Not A Triangle'
      WHEN A = B and B = C THEN 'Equilateral'
      WHEN A = B or A = C or B = C THEN 'Isosceles'
      WHEN A <> B and B <> C THEN 'Scalene'
      END tuple
      FROM TRIANGLES;



#5.CREATE TABLE occupations (name STRING, occupation STRING);
#Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed 
#by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). 
#For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
#Then uery the number of ocurrences of each occupation in OCCUPATIONS. 
#Sort the occurrences in ascending order, and output them in the following format:
#"There are a total of [occupation_count] [occupation]s." where [occupation_count] is 
#the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the 
#lowercase occupation name. If more than one Occupation has the same [occupation_count], 
#they should be ordered alphabetically.
      SELECT CONCAT(Name, "(", LEFT(Occupation, 1), ")") AS name
      FROM Occupations
      UNION ALL
      SELECT CONCAT('There are a total of ', COUNT(*), ' ', LOWER(Occupation), 's.') AS name
      FROM Occupations
      GROUP BY Occupation
      ORDER BY name;



#6. CREATE TABLE city (id NUMBER, name VARCHAR2(17), countrycode VARCHAR2(3), 
              district VARCHAR2(20), population NUMBER);
# CREATE TABLE country (code VARCHAR2(3), name VARCHAR2(44), continent VARCHAR2(13), 
              region VARCHAR2(25), surfacearea NUMBER, indepyear VARCHAR2(5), 
              population NUMBER, lifeexpectancy VARCHAR2(4), gnp NUMBER, gnpold NUMBER,
              localname VARCHAR2(9), governmentform VARCHAR2(44), headofstate VARCHAR2(32),
              capital VARCHAR2(4), code2 VARCHAR2(2)
        
#Given the CITY and COUNTRY tables, query the sum of the populations of all cities 
#where the CONTINENT is 'Asia'.
     SELECT SUM(city.population) FROM city
     LEFT JOIN country ON city.countrycode = country.code
     WHERE country.continent = 'Asia'

#Given the CITY and COUNTRY tables, query the names of all cities where the 
#CONTINENT is 'Africa'.
     SELECT city.name FROM city
     LEFT JOIN country ON city.countrycode = country.code
     WHERE country.continent = 'Africa';
    
#Given the CITY and COUNTRY tables, query the names of all the continents 
#(COUNTRY.Continent) and their respective average city populations (CITY.Population) 
#rounded down to the nearest integer.
    SELECT country.continent, FLOOR(AVG(city.population))
    FROM city
    Inner JOIN country ON city.countrycode = country.code
    GROUP BY country.continent;











