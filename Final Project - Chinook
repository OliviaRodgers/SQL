# Final project for certificate course, using a downloaded file with 11 tables. These tables include:
# employees, customers, invoices, invoice_items, artists, albums, tracks, playlists, playlist_track, media_types, and genres


# Provided questions:
# 1. Show Customers (their full names, customer ID, and country) who are not in the US. 
      SELECT CustomerId, FirstName, LastName, Country
      FROM chinook.customers
      WHERE chinook.customers.Country != 'USA';

# 2. Show only the Customers from Brazil.
      SELECT * FROM chinook.customers
      WHERE chinook.customers.Country = 'Brazil';

# 3. Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, 
# Invoice ID, Date of the invoice, and billing country.
      SELECT customers.FirstName, customers.LastName, invoices.invoiceid, invoices.InvoiceDate, invoices.BillingCountry
      FROM chinook.customers
      LEFT JOIN chinook.invoices
      ON customers.CustomerId = invoices.CustomerId
      WHERE customers.country = 'Brazil';

# 4. Show the Employees who are Sales Agents.
      SELECT * FROM chinook.employees WHERE title = 'Sales Support Agent';

# 5. Find a unique/distinct list of billing countries from the Invoice table.
      SELECT distinct billingcountry FROM chinook.invoices;

# 6. Provide a query that shows the invoices associated with each sales agent. The resulting table should include the 
# Sales Agent's full name.
      SELECT employees.FirstName, employees.LastName, invoices.invoiceid
      FROM employees
      JOIN customers
      ON employees.EmployeeId = customers.SupportRepId
      JOIN invoices
      ON customers.CustomerId = invoices.CustomerId;

# 7. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
      SELECT employees.FirstName, employees.LastName, customers.firstname, customers.LastName, customers.country, invoices.total
      FROM employees
      JOIN customers
      ON employees.EmployeeId = customers.SupportRepId
      JOIN invoices
      ON customers.CustomerId = invoices.CustomerId;

# 8. How many Invoices were there in 2009?
      SELECT COUNT(*) FROM invoices WHERE invoicedate BETWEEN '2009-01-01' AND '2009-12-31';

# 9. What are the total sales for 2009?
      SELECT SUM(total) FROM invoices WHERE invoicedate BETWEEN '2009-01-01' AND '2009-12-31';

# 10. Write a query that includes the purchased track name with each invoice line ID.
      SELECT tracks.Name, invoice_items.InvoiceLineId
      FROM invoice_items 
      LEFT JOIN tracks
      ON invoice_items.TrackId = tracks.TrackId;

# 11. Write a query that includes the purchased track name AND artist name with each invoice line ID.
       SELECT tracks.Name as Track, artists.Name as Artist, invoice_items.InvoiceLineId
      FROM invoice_items 
      LEFT JOIN tracks
      ON invoice_items.TrackId = tracks.TrackId
      INNER JOIN albums 
      ON tracks.AlbumId = albums.AlbumId
      LEFT JOIN artists
      ON albums.AlbumId = artists.ArtistId;

# 12. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
      SELECT tracks.Name as Track, albums.Title as Album_Name, media_types.Name as Media_Type, genres.Name as Genre 
      FROM tracks
      JOIN albums
      ON tracks.AlbumId = albums.AlbumId
      JOIN media_types
      ON tracks.MediaTypeId = media_types.MediaTypeId
      JOIN genres
      ON tracks.GenreId = genres.GenreId;

# 13. Show the total sales made by each sales agent.
      SELECT employees.FirstName as Sales_Agent_First_Name, employees.LastName as Sales_Agent_Last_Name, 
      ROUND(SUM(invoices.Total),2) as Total_Sales
      FROM employees
      JOIN customers
      ON employees.EmployeeId = customers.SupportRepId
      JOIN invoices
      ON customers.CustomerId = invoices.CustomerId
      WHERE employees.Title = 'Sales Support Agent'
      GROUP BY employees.FirstName;

# 14. Which sales agent made the most dollars in sales in 2009?
      SELECT employees.FirstName as Sales_Agent_First_Name, employees.LastName as Sales_Agent_Last_Name, 
      ROUND(SUM(invoices.Total),2) as Total_Sales
      FROM employees
      JOIN customers
      ON employees.EmployeeId = customers.SupportRepId
      JOIN invoices
      ON customers.CustomerId = invoices.CustomerId
      WHERE employees.Title = 'Sales Support Agent'
      AND invoices.InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31'
      GROUP BY employees.FirstName
      ORDER BY ROUND(SUM(invoices.Total),2) DESC LIMIT 1;


# Original questions: 

# 15. What track has sold the most times thus far, and what was the title of the album that contains that track?
      SELECT tracks.name, SUM(invoice_items.Quantity), albums.Title
      FROM tracks
      JOIN invoice_items 
      ON tracks.TrackId = invoice_items.TrackId
      JOIN albums
      ON tracks.AlbumId = albums.AlbumId
      GROUP BY tracks.name
      ORDER BY SUM(invoice_items.Quantity) DESC;

# 16. What is the average song length of tracks (in ms) sold by chinook?
      SELECT ROUND(AVG(tracks.Milliseconds),2) FROM tracks;

# 17. How many tracks were sold by to customers in each country, and what was the total sale, by country, in 2009?
      SELECT COUNT(invoice_items.TrackId) AS 'Tracks Sold', customers.Country
      FROM invoice_items
      JOIN invoices
      ON invoice_items.InvoiceId = invoices.InvoiceId
      JOIN customers
      ON invoices.CustomerId = customers.CustomerId
      GROUP by customers.Country;

# 18. What genres of tracks have been sold to customers in the US?
      SELECT COUNT(invoice_items.TrackId) as 'Total Tracks', genres.Name as 'Track Genre', customers.Country
      FROM invoice_items
      JOIN invoices
      ON invoice_items.InvoiceId = invoices.InvoiceId
      JOIN customers
      ON invoices.CustomerId = customers.CustomerId
      JOIN tracks
      ON invoice_items.TrackId = tracks.TrackId
      JOIN genres
      ON tracks.GenreId = genres.GenreId
      WHERE customers.Country = 'USA'
      GROUP BY genres.Name;

# 19. What tracks are in the Sci Fi and Fantasy Genre? 
      SELECT tracks.Name
      FROM tracks
      JOIN genres
      ON tracks.GenreId = genres.GenreId
      WHERE genres.Name = 'Sci Fi & Fantasy';

# 20. Make a list of all of the employees at Chinook along with the id of the employee that they report to, and organize
# the list by the id of the person each employee reports to.
      SELECT employees.EmployeeId, employees.FirstName, employees.LastName, employees.ReportsTo
      FROM employees
      ORDER BY employees.ReportsTo;

